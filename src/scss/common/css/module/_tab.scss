@charset "UTF-8";
@use "../define/variable" as var;
@use "../define/mixin" as *;
@use "sass:map";

// 下矢印の基本スタイル
%btn-primary-arrow {
  @include pseudo;

  bottom: 10px;
  left: 50%;
  width: 9px;
  height: 9px;
  transform: rotate(135deg);
  border-top: 2px solid var.$color-green;
  border-right: 2px solid var.$color-green;
  transition: bottom var.$animation-duration var.$animation-function;
}

@mixin tab-border($buttonColumnPc: 3, $buttonColumnSp: 2) {
  @for $count from 1 through $buttonColumnPc {
    &[data-col-wide="#{$count}"] {
      @include media-min {
        .m-tab {
          &__tab {
            &:nth-child(-n+#{$count}) {
              border-top: 1px solid var.$color-gray-03;

              @include hover {
                border-top: 1px solid var.$color-green;
              }
            }

            &:first-child,
            &:nth-child(#{$count}n+1) {
              border-left: 1px solid var.$color-gray-03;

              @include hover {
                border-left: 1px solid var.$color-green;
              }
            }
          }
        }
      }
    }
  }

  @for $count from 1 through $buttonColumnSp {
    &[data-col="#{$count}"] {
      @include media-max {
        .m-tab {
          &__tab {
            &:nth-child(-n+#{$count}) {
              border-top: 1px solid var.$color-gray-03;

              @include hover {
                border-top: 1px solid var.$color-green;
              }
            }

            &:first-child,
            &:nth-child(#{$count}n+1) {
              border-left: 1px solid var.$color-gray-03;

              @include hover {
                border-left: 1px solid var.$color-green;
              }
            }
          }
        }
      }
    }
  }
}

.m-tab {
  @include component-rule-gutter("M要素");

  &__list {
    @include create-multi-column-grid(5, 2, null);
    @include tab-border($buttonColumnPc: 5, $buttonColumnSp: 2);
  }

  &__tab {
    border-bottom: 1px solid var.$color-gray-03;
    border-right: 1px solid var.$color-gray-03;
    border-top: 1px solid transparent;
    border-left: 1px solid transparent;
    transition: background-color var.$animation-duration var.$animation-function;
    background-color: #ffffff;

    @include hover {
      border: 1px solid var.$color-green;
    }

    &[aria-selected="true"],
    &.is-current {
      > [class$="__bg"] {
        color: #ffffff;
        background-color: var.$color-green;
      }

      background-color: var.$color-green;
      border: 1px solid var.$color-green;
    }
  }

  &__bg {
    width: 100%;
    height: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
    font-weight: bold;
    flex-grow: 1;
    padding: 17px 10px;
    color: var.$color-black;
    background-color: #ffffff;
    text-align: center;
    transition: background-color var.$animation-duration var.$animation-function;
    z-index: map.get(var.$z-index-map, "layer1");

    @include media-min {
      padding: 24px 15px;
    }

    @include hover {
      background-color: #ebf6ed;
      color: var.$color-green;

      &::before {
        bottom: 7px;
      }
    }

    &::before {
      @include pseudo;
      @extend %btn-primary-arrow;

      transition: bottom var.$animation-duration var.$animation-function;
    }
  }

  &__panel {
    @include component-rule-gutter("S要素");
    @include reset-inner-gutter;
  }
}
